p = p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p = p + geom_point(colour="grey20", size=dotsize)
p = p + coord_flip()
p = p + scale_x_continuous("Expert Consensus Rank")
p = p + ylab("Average Expert Rank")
p = p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p = p + scale_colour_discrete(name="Tier")
p
p = ggplot(fp.tier.list$Overall, aes(x=rank, y =tiers.fp.avg))
p = p + ggtitle('Overall Rankings')
p = p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p = p + geom_point(colour="grey20", size=dotsize)
p = p + coord_flip()
p = p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p = p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - nchar/3 - tiers.fp.sd/1.8), size=font)
p = p + scale_x_continuous("Expert Consensus Rank")
p = p + ylab("Average Expert Rank")
p = p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p = p + scale_colour_discrete(name="Tier")
p = p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy = max( abs(this.pos$Avg.Rank)+this.pos$Std.Dev/2)
highcolor <- 650
##Overall Plot
font <- 2.4; barsize <- 1; dotsize <- 0.8; highcolor <- 650;
p <- ggplot(fp.tier.list$Overall, aes(x=rank, y =tiers.fp.avg))
p <- p + ggtitle('Overall Rankings')
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - nchar/3 - tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list$Overall$tiers.fp.avg)+fp.tier.list$Overall$tiers.fp.sd/2)
p = p + ylim(0, maxy)
p
##Tiers from Fantasy Pros
clust.k <- function(x, k = NA){
if(is.na(k)){
k = floor(nrow(x)/8)
}
clust <- Mclust(sqrt(x$tiers.fp.avg), G = k)
x$tiers.c <- clust$classification
clusters.found <- levels(factor(x$tiers.c))
clusters.found = as.numeric(clusters.found)
for (i in 1:k) {
if ( sum(x$tiers.c ==i)==0 ) { # if you don't find any of this cluster
# decrease everything above it by one
x$tiers.c[x$tiers.c>i] <- x$tiers.c[x$tiers.c>i]-1
}
}
x$rank <- as.numeric(1:nrow(x))  #Rank for sorting
x$tiers.c <- as.factor(x$tiers.c)
x$name.length <- nchar(x$tiers.fp.player)
return(x)
}
fp.tier.list <- lapply(fp.tier.list, clust.k)
##Overall Plot
font <- 2.4; barsize <- 1; dotsize <- 0.8; highcolor <- 650;
p <- ggplot(fp.tier.list$Overall, aes(x=rank, y =tiers.fp.avg))
p <- p + ggtitle('Overall Rankings')
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - name.length/3 - tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list$Overall$tiers.fp.avg)+fp.tier.list$Overall$tiers.fp.sd/2)
p = p + ylim(0, maxy)
p
p
p <- ggplot(fp.tier.list$Overall, aes(x=rank, y = -tiers.fp.avg))
p <- p + ggtitle('Overall Rankings')
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - name.length/3 - tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list$Overall$tiers.fp.avg)+fp.tier.list$Overall$tiers.fp.sd/2)
p = p + ylim(0, maxy)
p
p <- ggplot(fp.tier.list$Overall, aes(x=-rank, y = tiers.fp.avg))
p <- p + ggtitle('Overall Rankings')
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - name.length/3 - tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list$Overall$tiers.fp.avg)+fp.tier.list$Overall$tiers.fp.sd/2)
p = p + ylim(0, maxy)
p
View(fp.tier.list)
View(fp.tier.list)
getwd()
##Packages
require(rvest)
##Object to string function for easy saving
o2s <- function(v1) {
deparse(substitute(v1))
}
##ESPN Live Scrape Value
url <- 'https://games.espn.com/fba/livedraftresults'
webpage <- read_html(url)
rank.espn.live.players.html <- html_nodes(webpage, '.flexpop')  ## Read players
rank.espn.live.price.html <- html_nodes(webpage, '.tableSubHead~ tr+ tr td:nth-child(6)')  ##Read cost
rank.espn.live.position.html <- html_nodes(webpage, 'td:nth-child(3)') ## primary position
rank.espn.live.players <- html_text(rank.espn.live.players.html)  ##Parse players
rank.espn.live.price <- html_text(rank.espn.live.price.html)  ##Parse cost
rank.espn.live.position <- html_text(rank.espn.live.position.html)[-(1:2)] #Parse positions, dropping some clutter at the start
rank.espn.live <- as.data.frame(cbind(rank.espn.live.players,rank.espn.live.price, rank.espn.live.position)) ##Combine to one dataframe
names(rank.espn.live) <- c('player','price','prim.pos') #Rename columns
rank.espn.live$draft <- 1:nrow(rank.espn.live)
keep.list <- c('keep.list','o2s',o2s(rank.espn.live))  ##List for variables to not remove
rm(list=setdiff(ls(), keep.list))  #Empty work space
##ESPN Live Scrape Rating
url <- c('https://games.espn.com/fba/playerrater',
'https://games.espn.com/fba/playerrater?startIndex=50',
'https://games.espn.com/fba/playerrater?startIndex=100',
'https://games.espn.com/fba/playerrater?startIndex=150',
'https://games.espn.com/fba/playerrater?startIndex=200',
'https://games.espn.com/fba/playerrater?startIndex=250')       ##50 players per page, looking at top 300 only
for(i in 1:length(url)){
webpage <- read_html(url[i])
rating.espn.live.player.html <- html_nodes(webpage, '.flexpop:nth-child(1)')  ##Players
rating.espn.live.player.long.html <- html_nodes(webpage, '.playertablePlayerName') ## long name has multiple positions
rating.espn.live.table.html <- html_nodes(webpage,'.playertableData')  ##Table
rating.espn.live.player.temp <- html_text(rating.espn.live.player.html) #parse players
rating.espn.live.table.temp <- html_text(rating.espn.live.table.html) #parse table
rating.espn.live.player.long.temp <- html_text(rating.espn.live.player.long.html)  # long name parse
rating.espn.live.table.temp.df <- as.data.frame(matrix(rating.espn.live.table.temp[-(1:10)], ncol = 10, byrow = T)) #convert table to dataframe
if(i == 1){
rating.espn.live.player <- rating.espn.live.player.temp
rating.espn.live.table <- rating.espn.live.table.temp.df
rating.espn.live.player.long <- rating.espn.live.player.long.temp
}
else {
rating.espn.live.player <- append(rating.espn.live.player,rating.espn.live.player.temp)
rating.espn.live.table <- rbind(rating.espn.live.table,rating.espn.live.table.temp.df)
rating.espn.live.player.long <- append(rating.espn.live.player.long,rating.espn.live.player.long.temp)
}
}
rating.espn.live <- as.data.frame(cbind(rating.espn.live.player, rating.espn.live.player.long, rating.espn.live.table))
names(rating.espn.live) <- c('player','player.long','rank','fg.r','ft.r','3pm.r','reb.r','ast.r','stl.r','blk.r','pts.r','ovr.r')  #rename headers
keep.list <- append(keep.list,o2s(rating.espn.live))  ##List for variables to not remove
rm(list=setdiff(ls(), keep.list))  #Empty work space
##ESPN Projections
url <- c('https://games.espn.com/fba/tools/projections',
'http://games.espn.com/fba/tools/projections?startIndex=40',
'http://games.espn.com/fba/tools/projections?startIndex=80',
'http://games.espn.com/fba/tools/projections?startIndex=120',
'http://games.espn.com/fba/tools/projections?startIndex=160',
'http://games.espn.com/fba/tools/projections?startIndex=200',
'http://games.espn.com/fba/tools/projections?startIndex=240',
'http://games.espn.com/fba/tools/projections?startIndex=280') ##40 players per page, looking at top 320 only
##This loop mirrors the one above it for ratings
for(i in 1:length(url)){
webpage <- read_html(url[i])
projection.espn.live.player.html <- html_nodes(webpage, '.flexpop:nth-child(1)')
projection.espn.live.table.html <- html_nodes(webpage,'.playertableStat')
projection.espn.live.player.temp <- html_text(projection.espn.live.player.html)
projection.espn.live.table.temp <- html_text(projection.espn.live.table.html)
projection.espn.live.table.temp.df <- as.data.frame(matrix(projection.espn.live.table.temp[-(1:8)], ncol = 8, byrow = T))
if(i == 1){
projection.espn.live.player <- projection.espn.live.player.temp
projection.espn.live.table <- projection.espn.live.table.temp.df
}
else {
projection.espn.live.player <- append(projection.espn.live.player,projection.espn.live.player.temp)
projection.espn.live.table <- rbind(projection.espn.live.table,projection.espn.live.table.temp.df)
}
}
projection.espn.live <- as.data.frame(cbind(projection.espn.live.player, projection.espn.live.table))
names(projection.espn.live) <- c('player','fg.p','ft.p','3pm.p','reb.p','ast.p','stl.p','blk.p','pts.p')  #rename headers
keep.list <- append(keep.list,o2s(projection.espn.live))  ##List for variables to not remove
rm(list=setdiff(ls(), keep.list))  #Empty work space
#Yahoo Fantasy
url <- c('https://basketball.fantasysports.yahoo.com/nba/draftanalysis?tab=AD&pos=ALL&sort=DA_AP',
'https://basketball.fantasysports.yahoo.com/nba/draftanalysis?tab=AD&pos=ALL&sort=DA_AP&count=50',
'https://basketball.fantasysports.yahoo.com/nba/draftanalysis?tab=AD&pos=ALL&sort=DA_AP&count=100',
'https://basketball.fantasysports.yahoo.com/nba/draftanalysis?tab=AD&pos=ALL&sort=DA_AP&count=150',
'https://basketball.fantasysports.yahoo.com/nba/draftanalysis?tab=AD&pos=ALL&sort=DA_AP&count=200') ##50 players per page, looking at top 250 only
##This loop mirrors the one above it for ratings
for(i in 1:length(url)){
webpage <- read_html(url[i])
cost.yahoo.player.html <- html_nodes(webpage, '.F-link')
cost.yahoo.value.html <- html_nodes(webpage,'.Fz-xs+ td div')
cost.yahoo.cost.html <- html_nodes(webpage,'td.Last')
cost.yahoo.player.temp <- html_text(cost.yahoo.player.html)
cost.yahoo.value.temp <- html_text(cost.yahoo.value.html)
cost.yahoo.cost.temp <- html_text(cost.yahoo.cost.html)
if(i == 1){
cost.yahoo.player <- cost.yahoo.player.temp
cost.yahoo.value <- cost.yahoo.value.temp
cost.yahoo.cost <- cost.yahoo.cost.temp
}
else {
cost.yahoo.player <- append(cost.yahoo.player, cost.yahoo.player.temp)
cost.yahoo.value <- append(cost.yahoo.value, cost.yahoo.value.temp)
cost.yahoo.cost <- append(cost.yahoo.cost, cost.yahoo.cost.temp)
}
}
cost.yahoo <- as.data.frame(cbind(cost.yahoo.player,cost.yahoo.value,cost.yahoo.cost))
names(cost.yahoo) <- c('player','value.y','cost.y')
keep.list <- append(keep.list,o2s(cost.yahoo))  ##List for variables to not remove
rm(list=setdiff(ls(), keep.list))  #Empty work space
##FantasyPros (For Tiers)
fp.tiers.postions <- c('Overall','PG','SG','SF','PF','C')
fp.tier.size <-c(250,150,150,150,150,100)
url <- c('https://www.fantasypros.com/nba/rankings/overall',
'https://www.fantasypros.com/nba/rankings/pg',
'https://www.fantasypros.com/nba/rankings/sg',
'https://www.fantasypros.com/nba/rankings/sf',
'https://www.fantasypros.com/nba/rankings/pf',
'https://www.fantasypros.com/nba/rankings/c')
fp.tier.list = list()
for(i in 1:length(url)){
webpage <- read_html(url[i])
tiers.fp.player.html <- html_nodes(webpage, '.player-name')
tiers.fp.avg.html <- html_nodes(webpage, 'td:nth-child(5)')
tiers.fp.sd.html <- html_nodes(webpage, 'td:nth-child(6)')
tiers.fp.player <- as.character(html_text(tiers.fp.player.html)[1:fp.tier.size[i]])
tiers.fp.avg <- as.numeric(as.character(html_text(tiers.fp.avg.html)[1:fp.tier.size[i]]))
tiers.fp.sd <- as.numeric(as.character(html_text(tiers.fp.sd.html)[1:fp.tier.size[i]]))
tiers.df.temp <- data.frame(cbind(tiers.fp.player,tiers.fp.avg,tiers.fp.sd), stringsAsFactors = F) ##combines to one DF
tiers.df.temp[,2:3] <- sapply(tiers.df.temp[,2:3], as.numeric) ##converts numbersto numeric
tiers.df.temp <- tiers.df.temp[complete.cases(tiers.df.temp),] ##complete cases only
fp.tier.list[[fp.tiers.postions[i]]] <- tiers.df.temp ##output
}
keep.list <- append(keep.list,o2s(fp.tier.list))  ##List for variables to not remove
rm(list=setdiff(ls(), keep.list))  #Empty work space
## cost.yahoo DONE BELOW
## fp.tier.list DONE IN PULL
## projection.espn.live DONE
## rank.espn.live DONE
## rating.espn.live
##Wrangling to be put in separate file later
cost.yahoo$player <- as.character(cost.yahoo$player)  ##Convert from Factor to character (factors hard to work with)
cost.yahoo$value.y <- as.numeric(gsub('\\$', '', cost.yahoo$value.y))
cost.yahoo$cost.y <- as.numeric(gsub('\\$', '', cost.yahoo$cost.y))
projection.espn.live$player <- as.character(projection.espn.live$player)
projection.espn.live[,2:9] <- sapply(projection.espn.live[,2:9], function(x){ as.numeric(as.character(x))})
rank.espn.live$player <- as.character(rank.espn.live$player)
rank.espn.live$price <- as.numeric(as.character(rank.espn.live$price))
rank.espn.live$prim.pos <- as.character(rank.espn.live$prim.pos)
rating.espn.live <- as.data.frame(sapply(rating.espn.live, as.character), stringsAsFactors = F)
rating.espn.live[,3:12] <- sapply(rating.espn.live[,3:12], as.numeric)
rating.espn.live$temp <- unlist(regmatches(rating.espn.live$player.long, regexpr(", ", rating.espn.live$player.long),
invert = TRUE))[seq(2, nrow(rating.espn.live)*2, by =2)] ## Splits long string after comma
rating.espn.live$temp <- substr(rating.espn.live$temp,4, stop = 1000000) ##Cuts team name (except h in Utah, but who cares)
## Categorizes each player position
rating.espn.live$pos.pg <-  grepl('PG', rating.espn.live$temp)
rating.espn.live$pos.sg <-  grepl('SG', rating.espn.live$temp)
rating.espn.live$pos.sf <-  grepl('SF', rating.espn.live$temp)
rating.espn.live$pos.pf <-  grepl('PF', rating.espn.live$temp)
rating.espn.live$pos.c <-  grepl('C', rating.espn.live$temp)
rating.espn.live <- subset(rating.espn.live, select = -c(player.long,temp,rank))  ##removes junk
#Convert Yahoo names to ESPN
y2e <- read.csv('yahoo_to_espn_map.csv')
cost.yahoo <- merge(cost.yahoo, y2e, all = T, by.x = 'player', by.y = 'name.y')
cost.yahoo$name.e <- as.character(cost.yahoo$name.e)
cost.yahoo$player[!is.na(cost.yahoo$name.e)] <- cost.yahoo$name.e[!is.na(cost.yahoo$name.e)]
cost.yahoo <- subset(cost.yahoo, select = -(name.e))
##Merges data
fbb.data <- merge.data.frame(projection.espn.live, rating.espn.live, all = T, by.x = 'player', by.y = 'player')
fbb.data <- merge.data.frame(fbb.data, rank.espn.live,all = T, by.x = 'player', by.y = 'player')
fbb.data <- merge.data.frame(fbb.data, cost.yahoo,all = T, by.x = 'player', by.y = 'player')
fbb.data <- fbb.data[order(-fbb.data$ovr.r),] ## Reorder
num.teams <- 16; rost.size <- 12; doll.per <- 200; doll.min <- 1;
fbb.data$cost.g.o <- (fbb.data$ovr.r/sum(fbb.data$ovr.r[1:(num.teams*rost.size)]))*((doll.per - doll.min)*num.teams)
fbb.data$cost.g.o[(fbb.data$cost.g.o < 0) | is.na(fbb.data$cost.g.o)] <- 0
ga <- c('3pm.r', 'ast.r', 'ft.r')
fa <- c('fg.r', 'reb.r', 'blk.r')
fbb.data$ovr.r + rowSums(1.25*fbb.data[,ga])
fbb.data$ovr.r.ga.s <- fbb.data$ovr.r + rowSums(1*fbb.data[,ga])
fbb.data$ovr.r.ga.a <- fbb.data$ovr.r + rowSums(2*fbb.data[,ga])
fbb.data$ovr.r.ga.va <- fbb.data$ovr.r + rowSums(3*fbb.data[,ga])
fbb.data$ovr.r.fa.s <- fbb.data$ovr.r + rowSums(1*fbb.data[,fa])
fbb.data$ovr.r.fa.a <- fbb.data$ovr.r + rowSums(2*fbb.data[,fa])
fbb.data$ovr.r.fa.va <- fbb.data$ovr.r + rowSums(3*fbb.data[,fa])
View(cost.yahoo)
View(fbb.data)
custom.ratings <- c('ovr.r.ga.s','ovr.r.ga.a','ovr.r.ga.va','ovr.r.fa.s','ovr.r.fa.a','ovr.r.fa.va')
fbb.data[,custom.ratings]
sapply(fbb.data[,custom.ratings], function(x) {
x/sum(x[1:(num.teams*rost.size)])*((doll.per - doll.min)*num.teams)
})
fbb.data$ovr.r.ga.s <- fbb.data$ovr.r + rowSums(.2*fbb.data[,ga])  ##Standard guard focus
fbb.data$ovr.r.ga.a <- fbb.data$ovr.r + rowSums(.5*fbb.data[,ga])  ##Aggressive guard focus
fbb.data$ovr.r.ga.va <- fbb.data$ovr.r + rowSums(1*fbb.data[,ga]) ##Very aggressive guard focus
fbb.data$ovr.r.fa.s <- fbb.data$ovr.r + rowSums(.2*fbb.data[,fa])  ##Standard forward focus
fbb.data$ovr.r.fa.a <- fbb.data$ovr.r + rowSums(.5*fbb.data[,fa])  ##Aggressive forward focus
fbb.data$ovr.r.fa.va <- fbb.data$ovr.r + rowSums(1*fbb.data[,fa]) ##Very aggressive forward focus
sapply(fbb.data[,custom.ratings], function(x) {
x/sum(x[1:(num.teams*rost.size)])*((doll.per - doll.min)*num.teams)
})
substr(custom.ratings,4,10000)
paste0('cost',substr(custom.ratings,4,10000))
custom.cost <- paste0('cost',substr(custom.ratings,4,10000))
fbb.data[,custom.cost] <- sapply(fbb.data[,custom.ratings], function(x) {
x/sum(x[1:(num.teams*rost.size)])*((doll.per - doll.min)*num.teams)
})
names(fp.tier.list)
i =3
pos.name <- names(fp.tier.list)[i]
p <- ggplot(fp.tier.list$Overall[1:70,], aes(x=-rank, y = tiers.fp.avg))
require(ggplot2)
##Packages
require(mclust)
font <- 3; barsize <- 1.25; dotsize <- 1; highcolor <- 450;
p <- ggplot(fp.tier.list$Overall[1:70,], aes(x=-rank, y = tiers.fp.avg))
p <- p + ggtitle(paste0(pos.name,' Rankings'))
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - name.length/2
- tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list$Overall$tiers.fp.avg[1:70])+fp.tier.list$Overall$tiers.fp.sd[1:70]/2)
fp.tier.list[[2]]
maxy <- max( abs(fp.tier.list[[i]]$tiers.fp.avg[1:70])+fp.tier.list[[i]]$tiers.fp.sd[1:70]/2)
p = p + ylim(-10, maxy)
DPI = 250
ggsave(file=paste0('predraft-',pos.name,'.png'), width = 10, height = 8.75, dpi = DPI)
##Tiers from Fantasy Pros
clust.k <- function(x, k = NA){
if(is.na(k)){
k = floor(nrow(x)/8)
}
clust <- Mclust(sqrt(x$tiers.fp.avg), G = k)
x$tiers.c <- clust$classification
clusters.found <- levels(factor(x$tiers.c))
clusters.found = as.numeric(clusters.found)
for (i in 1:k) {
if ( sum(x$tiers.c ==i)==0 ) { # if you don't find any of this cluster
# decrease everything above it by one
x$tiers.c[x$tiers.c>i] <- x$tiers.c[x$tiers.c>i]-1
}
}
x$rank <- as.numeric(1:nrow(x))  #Rank for sorting
x$tiers.c <- as.factor(x$tiers.c)
x$name.length <- nchar(x$tiers.fp.player)
return(x)
}
fp.tier.list <- lapply(fp.tier.list, clust.k)
ggsave(file=paste0('predraft-',pos.name,'.png'), width = 10, height = 8.75, dpi = DPI)
font <- 3; barsize <- 1.25; dotsize <- 1; highcolor <- 450;
p <- ggplot(fp.tier.list$Overall[1:70,], aes(x=-rank, y = tiers.fp.avg))
p <- p + ggtitle(paste0(pos.name,' Rankings'))
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - name.length/2
- tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list[[i]]$tiers.fp.avg[1:70])+fp.tier.list[[i]]$tiers.fp.sd[1:70]/2)
p = p + ylim(-10, maxy)
DPI = 250
ggsave(file=paste0('predraft-',pos.name,'.png'), width = 10, height = 8.75, dpi = DPI)
fp.tier.list[[i]][1:70,]
font <- 3; barsize <- 1.25; dotsize <- 1; highcolor <- 450;
p <- ggplot(fp.tier.list[[i]][1:70,], aes(x=-rank, y = tiers.fp.avg))
p <- p + ggtitle(paste0(pos.name,' Rankings'))
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - name.length/2
- tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list[[i]]$tiers.fp.avg[1:70])+fp.tier.list[[i]]$tiers.fp.sd[1:70]/2)
p = p + ylim(-20, maxy)
DPI = 250
ggsave(file=paste0('predraft-',pos.name,'.png'), width = 10, height = 8.75, dpi = DPI)
for(i in 1:length(names(fp.tier.list))){
pos.name <- names(fp.tier.list)[i]
if(pos.name == 'Overall') {
##Overall Plot
font <- 2.4; barsize <- 1; dotsize <- 0.8; highcolor <- 650;
p <- ggplot(fp.tier.list$Overall[1:150,], aes(x=-rank, y = tiers.fp.avg))
p <- p + ggtitle('Overall Rankings')
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - name.length/2
- tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list$Overall$tiers.fp.avg[1:150])+fp.tier.list$Overall$tiers.fp.sd[1:150]/2)
p = p + ylim(-10, maxy)
DPI = 350
ggsave(file="predraft-overall.png", width = 14, height = 14, dpi = DPI)
}
else{
font <- 3; barsize <- 1.25; dotsize <- 1; highcolor <- 450;
p <- ggplot(fp.tier.list[[i]][1:70,], aes(x=-rank, y = tiers.fp.avg))
p <- p + ggtitle(paste0(pos.name,' Rankings'))
p <- p + geom_errorbar(aes(ymin = tiers.fp.avg - tiers.fp.sd/2, ymax = tiers.fp.avg + tiers.fp.sd/2, width=0.2, colour=tiers.c), size=barsize*0.8, alpha=0.4)
p <- p + geom_point(colour="grey20", size=dotsize)
p <- p + coord_flip()
p <- p + annotate("text", x = Inf, y = -Inf, label = "www.GeorgeRooney.com", hjust=1.1, vjust=-1.1, col="white", cex=6, fontface = "bold", alpha = 0.8)
p <- p + geom_text(aes(label=tiers.fp.player, colour=tiers.c, y = tiers.fp.avg - name.length/2
- tiers.fp.sd/1.8), size=font)
p <- p + scale_x_continuous("Expert Consensus Rank")
p <- p + ylab("Average Expert Rank")
p <- p + theme(legend.justification=c(1,1), legend.position=c(1,1))
p <- p + scale_colour_discrete(name="Tier")
p <- p + scale_colour_hue(l=55, h=c(0, highcolor))
maxy <- max( abs(fp.tier.list[[i]]$tiers.fp.avg[1:70])+fp.tier.list[[i]]$tiers.fp.sd[1:70]/2)
p = p + ylim(-10, maxy)
DPI = 350
ggsave(file=paste0('predraft-',pos.name,'.png'), width = 10, height = 8.75, dpi = DPI)
}
}
write.csv('fbb_output.csv', row.names = F)
write.csv('fbb_output.csv', row.names = F)
write.csv(fbb.data,'fbb_output.csv', row.names = F)
sample(1:12,16, replace = T)
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,16, replace = T)) + 96
sum(sample(1:12,5, replace = T)) + 96
sum(sample(1:12,5, replace = T)) + sample(1:6,1)
sum(sample(1:12,5, replace = T)) + sample(1:6,1)
sum(sample(1:12,5, replace = T)) + sample(1:6,1)
sum(sample(1:12,5, replace = T)) + sample(1:6,1)
sum(sample(1:12,5, replace = T)) + sample(1:6,1)
sum(sample(1:12,5, replace = T)) + sample(1:6,1)
sum(sample(1:12,5, replace = T)) + sample(1:6,1)
sample(1:6, replace = T)
sample(1:6, 3,replace = T)
sum(sample(1:6, 3,replace = T)) + 3
sum(sample(1:6, 3,replace = T)) + 3
sum(sample(1:6, 3,replace = T)) + 3
sum(sample(1:6, 3,replace = T)) + 3
sum(sample(1:8, 3,replace = T)) + 3
sum(sample(1:8, 3,replace = T)) + 3
sum(sample(1:8, 3,replace = T)) + 3
sum(sample(1:8, 3,replace = T)) + 3
sum(sample(1:8, 3,replace = T)) + 3
?pchisq()
pchisq(76.2,19)
pchisq(36.95,19)
pchisq(11.95,19)
pchisq(6.7529,19)
pchisq(12.58,19)
150763524.791*50
sample(1:10,2, replace = T)
sample(1:10,2, replace = T)
order(sample(1:6,4, replace = T))
order(sample(1:6,4, replace = T))
order(sample(1:6,4, replace = T))
sample(1:6,4, replace = T)
sort(sample(1:6,4, replace = T))
?sort(sample(1:6,4, replace = T))
sum(sort(sample(1:6,4, replace = T))[2:4])
sum(sort(sample(1:6,4, replace = T))[2:4])
N <- 10000000
N <- 10000000
Sample <- rep(NA,N)
DATA.S <- rep(NA,N)
for(i in 1:N) {
DATA.S[i] <- sum(sort(sample(1:6,4, replace = T))[2:4])
}
?sapply
DATA.2 <- rep(4,N)
DATA.2.A <- sapply(DATA.2, function(x) sum(sort(sample(1:6,x, replace = T))[2:4]))
DATA.2 <- rep(4,N)
DATA.2.A <- sapply(DATA.2, function(x) sum(sort(sample(1:6,x, replace = T))[2:4]))
aggregate((DATA.S))
